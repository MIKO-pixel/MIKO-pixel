#Daten importieren, verstehen und dataframes aufbereiten

Verbindung zu sql-Datenbank herstellen:
$server = 'sepcificname.database.windows.net' 
$database = 'sepcificname' 
$username = 'username' 
$password = 'password'  
$cnxn = pyodbc.connect('DRIVER={SQL Server};SERVER='+server+';DATABASE='+database+';UID='+username+';PWD='+ password)
$cursor = cnxn.cursor()

Abfrage auf sql-Datenbank laufen lassen und Ergebnis als dataframe speichern:
$query = "SELECT distinct column_1, count(column_2) as userid_count FROM [table] group by column_1;"
$df = pd.read_sql(query, cnxn)

Import csv as dataframe:
$df = pd.read_csv('file.csv')
weitere commands dazu:
$delimiter=',', nrows=100000

allgemeine Info erhalten:
$df.info()

statistische Aussagen erhalten:
$df.describe()

Anzahl Spalten und Zeilen anzeigen:
$df.shape

Nach Zeilen mit Wert 0 suchen:
$df.isnull().sum()

Nach leeren Zeilen suchen:
$df.isna().sum()

Nur ausgewählte Spalten eines Dataframes in ein neues übernehmen:
$df2 = df[["column_1", "column_2"]]

Spalten entfernen:
$df2 = df.drop(['column_5', 'column_6', 'column_7'], axis=1)

Leere Werte entfernen (notwendig für weitere Auswertungen bzw. joins):
$df.dropna(axis='columns')

Index neu setzen, zB. in einer weiteren Spalte mit aufsteigender RefNr.:
$df3 = df2.reset_index(level=None, drop=False, inplace=False, col_level=0, col_fill='')

Indexspalte benennen:
$df.index.name='index'

Datentyp einer Spalte ändern auf Kategorie:
$df[column_1] = df[column_1].astype('category')

Datentyp einer Spalte ändern auf String (text):
$df['column_1'] = oc_lastlogindate['column_1'].astype(str)

Datentyp einer Spalte ändern auf float (Dezimalzahlen):
$df["column_1"] = df["column_1"].astype(str).astype(float)

Datentyp einer Spalte ändern auf Datum (Jahr-Monat-Tag):
$ddf['date'] = pd.to_datetime(df.date , format = '%Y/%m/%d')

Leerzeichen innerhalb der Zellen entfernen:
$df.replace('', np.nan, inplace=True)

Sonderzeichen aus string entfernen:
$df.replace('’','', regex=True, inplace=True) 

String splitten nach Zeichen:
$df.column_1.str.split(' ', expand=True)

Spalten umbenennen:
$df.rename(columns = {'column_1' : 'newnamedcolumn_1', 'column_2' : 'newnamedcolumn_2', 'column_3' : 'newnamedcolumn_3'}, inplace = True)

Werte in Spalte sortieren:
$df.sort_values(by=['column_1'], inplace=True)

Grösste Werte einer Spalte anzeigen:
$df.nlargest(20, 'column_1')


#Daten exportieren

Export zu csv:
$df.to_csv('column_1.csv')


#Daten gruppieren und pivotieren

Nach Spalte gruppieren und Summe bilden:
$algo_cnt = df.groupby(['column_1']).count()

Nach Spalte gruppieren und Mittelwert bilden:
$algo_cnt = df.groupby('column_1').mean()

Nach Spalte gruppieren und Werte zählen:
$df.groupby('column_1')['column_2'].agg(['column_3'])

Nach Spalte gruppieren, nach zweiter Spalte untergruppieren und von Untergruppe jeweils die Summe bilden:
$df3 = df.groupby(['column_1', 'column_2'])["column_3"].apply(lambda x : x.astype(int).sum())

What is unstack in Python? (entpivotieren)
DataFrame - unstack() function
Pivot a level of the (necessarily hierarchical) index labels, returning a DataFrame having a new level of column labels whose inner-most level consists of the pivoted index labels.
$df4 = df3.unstack(level=- 1, fill_value='0')


#Dataframes verbinden

mehrere Dataframes verketten:
$df_new =  pd.concat([df1, df2, df3])

zwei Dataframes joinen (inner join):
$joined_df2 = pd.merge(df2, df3, on='column_1', how='inner')


#Explorative Datenanalyse

Korrelationen zu Wert in column_1 darstellen:
$corr = df2[['column_2', 'column_3', 'column_4']]
$corr[corr.columns[:]].corr()['column_1'][:]

Korrelations-Heatmap plotten (Seaborne):
$import seaborn as sns
$df_heatmap = df2.corr().round(2)
$f, ax = plt.subplots(figsize=(18, 12))
$sns.heatmap(df_heatmap, annot=True, annot_kws={'size': 10}, linewidths=.5)

Scatterplot für zwei ausgewählte Parameter eines dataframes:
$import matplotlib.pyplot as plt
$import seaborn as sns
$sns.set_theme(style="darkgrid")
$sns.relplot(x="DE", y="bet", data=df);


Scatterplot-Matrix plotten:
$from pandas.plotting import scatter_matrix
$pd.plotting.scatter_matrix(df, alpha=0.5, figsize=(18,18), ax=None, grid=True, diagonal='hist', marker='.', density_kwds=None, hist_kwds=None, range_padding=0.05)

Save figure:
$from matplotlib import pyplot as plt
$from pylab import savefig
$figure = svm.get_figure()    
$figure.savefig('svm_conf.png', dpi=400)

Boxplot (böxli auf Linie):
$from matplotlib import pyplot as plt
$df.plot(kind="box", subplots=True, layout= (5,5), fontsize=12, figsize=(16,16))
oder
$boxplot = df.boxplot(column=['column_1', 'column_2', 'column_3'])

Distplot (Säulen und Trendlinie):
$from matplotlib import pyplot as plt
$sns.set(rc={'figure.figsize':(11.7,8.27)})
$sns.distplot(df['column_1'], bins=30, kde=True)
$plt.show()

Pairplot (Säulen):
$from matplotlib import pyplot as plt
$feature_names = ['column_1']
$sns.set(style='whitegrid',context='notebook')
$cols=df[feature_names]
$sns.pairplot(cols,height=6)
$plt.show()

Liniendiagramm:
$from matplotlib import pyplot as plt
df.head()
plt.xlabel('column_1')
plt.ylabel('column_2')
plt.plot(oc_signupsperdatecount)

Umwandeln von Spalten in plot-bares Format:
$df["column_1"] = df["column_1"].astype(str).astype(int)

Zeitreihe mit mehereren Variablen (enthalten im dataframe, hier ist der Index "date"):
$df.set_index('date').plot(rot=45)
plt.xlabel("Bezeichnung1",size=14)
plt.ylabel("Bezeichnung2",size=14)
plt.title("Bezeichnung3", size=16)

Zeitreihe einer spezifischen Spalte eines dataframes:
$df.set_index('date')['column_1'].plot()
plt.xlabel("Bezeichnung1",size=14)
plt.ylabel("Bezeichnung2",size=14)
plt.title("Bezeichnung3", size=16)

Analyse von Ausreissern:
# Funktion zur Berechnung der Whiskers:
$def iqr_fences(column):
    Q1 = column.quantile(0.25)
    Q3 = column.quantile(0.75)
    IQR = Q3 - Q1
    lowerFence = Q1 - (1.1 * IQR)
    upperFence = Q3 + (1.5 * IQR)
    return lowerFence, upperFence

$for label, content in df_transactionscorr.items():
        Q1 = content.quantile(0.25)
        Q3 = content.quantile(0.75)
        IQR = Q3 - Q1
        v_col = content[(content <= Q1 - 1.1 * IQR) | (content >= Q3 + 1.5 * IQR)]
        perc = np.shape(v_col)[0] * 100.0 / np.shape(df_transactionscorr)[0]
        print("Spalte {} Anteil an Outliers = {}%".format(label, round(perc, 2)))
        
$for i in df_transactionscorr.columns:
    result = iqr_fences(df_transactionscorr[i])
    lowerFence = result[0]
    upperFence = result[1]
    print("Lower Fence of {}: {}".format(i,lowerFence))
    print("Upper Fence of {}: {}".format(i, upperFence))

oder

$Q1 = df['column_1'].quantile(0.25)
Q3 = df['column_1'].quantile(0.75)
IQR = Q3 - Q1
MaxW = Q3 + 1.5*IQR
MinW = Q1 - 1.1*IQR

MAX_MV = df_transactionscorr[df_transactionscorr['bet']>MaxW]
MAX_MV

Schwarmdiagramm und Whisker:   
$plt.figure(figsize=(7, 5))
$ax = sns.boxplot(y="bet", data=df)
$ax = sns.swarmplot(y="bet", data=df, color=".25")

$lowerFence, upperFence = iqr_fences(df['column_1'])

#Print-Statement für Whiskers
$print("Min-Whisker: {} CHF".format((lowerFence*1).round(2)))
$print("Max-Whisker: {} CHF".format((upperFence*1).round(2)))    

# Print Anzahl der Datensätze, welche überhalb des Max-Whiskers liegen:
$print(len(df[df['column_1'] > 5709381.5]))
$print(len(df[df['column_1'] < -198130.7]))


